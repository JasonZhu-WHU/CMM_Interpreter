// test1.cmm 主要用来测试最正常的一个程序
int a = 1, c = 2, my_array[3] = {1,2,};
int b = 2;
char x = '\x';
int d = 4;
string s = "Hello CMM_Interpreter!";
real i = 1 + 2 * 3 / 4 + 5 / 6 / 7 / 8 * 9 * 10 / 11;
int repeat = 2;
// 4 advanced tests

int square_sum(int a, int b){
	while(repeat){
		repeat = repeat - 1;
		write repeat;
	}
    int square = a*a + b * b;
    return square;
}

char c_array[5] = {'1', '2','3', '4'};

int main()
{
	//类型检查
	//int i = '9';
	//i = 7 + "string";
	//声明与作用域检查
	//not_declared = 0;
	//{
	//    int not_declared = 0;
	//}
	//write not_declared;
	//除数不为0
	//repeat = 9 / 0;
	//数组下标检查
	//write my_array[-1];
	//write my_array[3];
	//除数不为0
    // 1 basic tests
	real repeat;
	read repeat;
	write repeat;
	repeat = (-1+2*3/(4-3)+(+3)-(-2)/(4 * 4 + 2)/(4/4*3)/2.0);
	write repeat;
	//左结合
    if (a>b==2+3<>repeat){
        write (repeat<2<>3+5==2);
    }
    int k[3]={1,(23+d),1*5==1+1};
	write(k[2]);
    int asdf_____2[2];
    if(1){
		write s;
        if(b){
			int num;
			read num;
			while(num>0){
				write num;
				if(num > 4){
					num = num - 2;
				}
				else{
					num=num-1;
				}
			}
			write (s);
            if(c+1){
				write ("I don't love interpreter :(");
                if(d==4){
                    if(((2==4))){}
                    else{
						write "I don't love interpreter :(";
                    }
                }
            }
        }
    }
    else if(3){
		a = square_sum(1,2);
    }
	a = square_sum(a*a, 2);
	write a;
	
    // 2 extended tests
    // boolean operator test
	int sdf = 3, p2 = 3 + 2 * 1;
	//左结合
    if(sdf==23||-1&&+3==12<>p2+1||p3/0){
        write (1==2&&a[2]||32/ads&&d2*5);
    }
    // array assignment
    real aa[5]={1,(((0000))),a,1 / 2 / 3,(1+1)*1+1};
	write aa;
    int a = 6 * 7 - - - 3;
    // 3 my tests
    //顺序结构（赋值语句、输入read、输出write）
    a = 1;
    int b = 2;
    int c[4]={1,1,1,};
	write c;
	read c;
	read c[2];
	write c;
    //选择语句（if-else）
    if (c[2] == 1) {
        write a + b;
    } else {
        write a - b;
//检测分号问题        a += 3
//检测多一个分号情况，这样就会main函数到这里结束        }
    } /*
int
efwhufeiju二负欸u uv红e6T^*#7
*/

    //关系表达式+算术表达式
    if(a==b){
        int addition=a+b;
    }
	else if(a<b){
        int subtraction=b-a;
		//检测数组未给定下标直接访问        c[] = 3;
//检测终结符符号缺少        a a + 3;
//检测数组定义时未给定范围        real f[] = {1,2,3.2,0.3};
        //int d[4={1,1,1,};
    } 
	else if(a>b){
			int multiplication=a*b;
    }
	else{
        int division=b/a;
    }
    333;
	
    a = 5;
    //正常人的写法
    if(a>4 && a>3){
        write ("这样很好");
    }
    //真是看的想打人，但是a>b>c实际含义是a>b返回0或者1，然后与c比较
    if(a>4>3||a<3<2&&a>3<=8<>1||a>b==2+3<>repeat){
        write ("这样也行? \n");  
    }
    else{
        write ("8太行? \n");
    }
	return 0;
}
