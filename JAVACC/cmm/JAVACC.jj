/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JAVACC.jj */
/*@egen*/options
{
  //\u6211\u53d1\u73b0\u4e5f\u53ef\u4ee5\u4e0d\u8bbe\u5b9a
}

PARSER_BEGIN(CMM_Interpreter)
package cmm;
import java.util.*;

public class CMM_Interpreter/*@bgen(jjtree)*/implements CMM_InterpreterTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCMM_InterpreterState jjtree = new JJTCMM_InterpreterState();

/*@egen*/
  public Node rootNode()
  {
    return jjtree.rootNode();
  }
}

PARSER_END(CMM_Interpreter)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

//\u5b9a\u4e49\u5173\u952e\u5b57
TOKEN :
{
  < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < READ : "read" >
| < WRITE : "write" >
| < INT : "int" >
| < REAL : "real" >
}

//\u5b9a\u4e49int
TOKEN :
{
  < INTEGER_LITERAL :
    (
      [ "1"-"9" ] (< DIGIT >)*
    | "0"
    )
  |
    (
      "-" [ "1"-"9" ] (< DIGIT >)*
    | "0"
    ) >
}

//\u5b9a\u4e49real
TOKEN :
{
  < REAL_LITERAL :
    (
      "-"
      (
        (< DIGIT >)+
      | (< DIGIT >)+ "."
      | (< DIGIT >)+ "." (< DIGIT >)+
      | "." (< DIGIT >)+
      )
    )
  |
    (
      (< DIGIT >)+
    | (< DIGIT >)+ "."
    | (< DIGIT >)+ "." (< DIGIT >)+
    | "." (< DIGIT >)+
    ) >
}

//\u5b9a\u4e49\u6807\u8bc6\u7b26
TOKEN :
{
  < IDENTIFIER :
    < LETTER >
  | < LETTER >
    (
      < LETTER >
    | < DIGIT >
    | "_"
    )*
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

void Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Procedure() 
  < EOF >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Procedure()       :
{}
{
  (
    Statement()
  )*
}

void Statement()       :
{}
{
  Declaration()
| Assignment()
| WhileStmt()
| ReadStmt()
| IfStmt()
| WriteStmt()
| Block()
}

void Block() :
{/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  "{"
  (
    Statement()
  )*
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStmt() :
{/*@bgen(jjtree) WhileStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStmt */
  try {
/*@egen*/
  < WHILE > "(" Condition() ")" Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReadStmt() :
{/*@bgen(jjtree) ReadStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTREADSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReadStmt */
  try {
/*@egen*/
  < READ > Expression() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WriteStmt() :
{/*@bgen(jjtree) WriteStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WriteStmt */
  try {
/*@egen*/
  < WRITE > Expression() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStmt() :
{/*@bgen(jjtree) IfStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
  try {
/*@egen*/
  LOOKAHEAD(< IF > "(" Condition() ")" Block())
  (
    < IF > "(" Condition() ")" Block() < ELSE >
  )+
  Block()
| < IF > "(" Condition() ")" Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Condition()       :
{}
{
  EqualityExpression()
}

/** Equality expression. */
void EqualityExpression()       :
{}
{
  RelationalExpression()
  (
    "=="/*@bgen(jjtree) #EQNode( 2) */
         {
           SimpleNode jjtn001 = new SimpleNode(JJTEQNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/           
| 
  "<>"/*@bgen(jjtree) #NENode( 2) */
       {
         SimpleNode jjtn002 = new SimpleNode(JJTNENODE);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte002) {
         if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof RuntimeException) {
           throw (RuntimeException)jjte002;
         }
         if (jjte002 instanceof ParseException) {
           throw (ParseException)jjte002;
         }
         throw (Error)jjte002;
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002,  2);
         }
       }
/*@egen*/           
)*
}

/** Relational expression. */
void RelationalExpression()       :
{}
{
  Expression()
  (
    "<"/*@bgen(jjtree) #LTNode( 2) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTLTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/           
| 
  ">"/*@bgen(jjtree) #GTNode( 2) */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTGTNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/           
| 
"<="/*@bgen(jjtree) #LENode( 2) */
     {
       SimpleNode jjtn003 = new SimpleNode(JJTLENODE);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  2);
       }
     }
/*@egen*/           
| 
">="/*@bgen(jjtree) #GENode( 2) */
     {
       SimpleNode jjtn004 = new SimpleNode(JJTGENODE);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  2);
       }
     }
/*@egen*/           
)*
}

void Declaration()       :
{}
{
  (
    LOOKAHEAD(2)
    ScalarDeclaration()
  | 
    FormDeclaration()
  )
  ";"
}

void ScalarDeclaration() :
{/*@bgen(jjtree) ScalarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTSCALARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ScalarDeclaration */
  try {
/*@egen*/
  (
    < INT >
    {
      
    }
  | 
    < REAL >
    {
      
    }
  )
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FormDeclaration() :
{/*@bgen(jjtree) FormDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t, t2;
}
{/*@bgen(jjtree) FormDeclaration */
  try {
/*@egen*/
  (
    < INT > "["
    [
      t2 = < INTEGER_LITERAL >
      {
        
      }
    ]
    "]"
    {
      
    }
  | 
    < REAL > "["
    [
      t2 = < INTEGER_LITERAL >
      {
        
      }
    ]
    "]"
    {
      
    }
  )
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignment()                :
{/*@bgen(jjtree) #Assignment( 2) */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Assignment( 2) */
  try {
/*@egen*/
  Id() "=" Expression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000,  2);
    jjtc000 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
    }
  }
/*@egen*/
}

void Expression()       :
{}
{
  [ "-" ] Term()
  (
    "+" Term()/*@bgen(jjtree) #AddNode( 2) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTADDNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
               
| 
  "-" Term()/*@bgen(jjtree) #SubNode( 2) */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTSUBNODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  2);
    jjtc002 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
  }
/*@egen*/
             
)*
}

void Term()       :
{}
{
  Factor()
  (
    "*" Factor()/*@bgen(jjtree) #MulNode( 2) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTMULNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
               
| 
  "/" Factor()/*@bgen(jjtree) #DivNode( 2) */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTDIVNODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  2);
    jjtc002 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
  }
/*@egen*/
             
)*
}

void Factor()       :
{}
{
  Id()
| Literal()
| "(" Expression() ")"
}

void Id()       :
{}
{
  LOOKAHEAD(2)
  FormId()
| 
  ScalarId()
}

void ScalarId() :
{/*@bgen(jjtree) ScalarId */
  SimpleNode jjtn000 = new SimpleNode(JJTSCALARID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ScalarId */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FormId() :
{/*@bgen(jjtree) FormId */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t1, t2;
}
{/*@bgen(jjtree) FormId */
  try {
/*@egen*/
  t1 = < IDENTIFIER > 
  "[" t2 = < INTEGER_LITERAL > "]"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Literal()       :
{
  Token t;
}
{/*@bgen(jjtree) IntConstNode */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTINTCONSTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/
    {
      
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
|/*@bgen(jjtree) RealConstNode */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTREALCONSTNODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ 
  (
  t = < REAL_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/
  {
    
  }
)/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/               
}
